# This is the Python code for model testing (Page 20/25, part 2).
# Designed by Wenxuan Luo and commented by Hanlin Cai (Team #2316192).
# Github Page: https://github.com/GuangLun2000/MCM-2316192/

import random
import matplotlib.pyplot as plt
a = [i for i in range(1,90)]
# print(len(a),a)

res_a=[4.038681320599292, 3.9446236343616876, 3.783079623782853, 3.7656463494072483, 4.06894494950623, 3.857206826858647, 4.011268769760003, 3.9253891372646583, 3.791093735961513, 4.107207269866981, 4.015226436051742, 3.8505798433645646, 4.104760249696556, 3.8946812583842174, 3.7919780501998455, 3.9284879537173802, 3.7716893475712814, 3.93002434339704, 3.978254112677754, 3.862113849238927, 3.6393492119778204, 3.821036957569098, 3.785664558700498, 3.839416135670919, 3.7538481858244124, 3.998964656124622, 3.8689002453168504, 3.9947880363472024, 4.051933563079881, 3.9345445057859756, 4.361875528110801, 3.878800319958768, 4.037427921209285, 3.890710335615289, 3.8415901895403293, 4.027142788120834, 4.048157644057706, 3.8217730655519615, 3.9505712231500816, 4.007558809879793, 3.7548374906207025, 3.888173875929896, 4.020598802871498, 4.029894878884783, 4.109227410633015, 3.8323106725723743, 4.164344974907938, 4.096776850854461, 3.502892274359761, 3.7805519406916277, 4.176371313024095, 3.856788588091616, 4.004069966328642, 3.996971207990085, 4.083867041955118, 4.0533220899658815, 4.167858897751046, 3.9807898732620366, 3.8618388498444283, 4.149781994804173, 3.8854527972070647, 3.720577931450638, 3.96468039108695, 3.8619330675330614, 3.6856773383225416, 4.07182108206241, 3.733176181880771, 4.088808074021843, 4.237289254614704, 3.919110253159131, 3.8733175515548934, 4.112341498633469, 3.9810307786441985, 3.927879990932426, 3.700638648707028, 4.271754121338376, 3.770122880633168, 3.9518862234684367, 3.8121907907580734, 3.707773120892372, 4.086754048389184, 3.9552239370900546, 3.87502010894449, 3.9981046055967244, 3.9785287663474396, 3.9128895647479442, 4.036234005724472, 3.9908384877323417, 3.8734185630325673]
# print("k",len(res_a))
res_b=[3.963010834960408, 3.823953479221397, 4.019749382124948, 3.8689330141239155, 4.065455048057397, 3.894328570766832, 4.154952607010217, 4.03061480005187, 3.990943859521958, 3.9465574609532954, 4.102062552888335, 3.91648821316043, 3.84604286345596, 3.9640090154822003, 3.888910003542205, 4.040230440051457, 3.6023364808350102, 3.9038910624777934, 3.847574544312983, 4.222231005698471, 3.78248484553475, 4.007414168876879, 3.9652369495919455, 4.008485211742184, 3.879272778418204, 3.9481590889689313, 4.193653649859054, 4.103268710606874, 4.153713703816575, 4.027982860697831, 3.9835639253973527, 4.06888812586609, 3.97333846957169, 3.9213122387647337, 3.8160960948657836, 3.8299337079317457, 3.8480219021692523, 3.7644379671499433, 4.195453953122907, 4.091936957745556, 4.07394665554594, 4.191781246495981, 4.109674109053461, 3.6972860746759784, 3.857399951680409, 3.9668869600478356, 3.967428084618213, 3.677008862556285, 4.124026443937326, 4.058387340194899, 3.9361517983256933, 3.831637763940586, 4.04798480960244, 4.142830339726388, 3.7961769334089137, 3.5951679000134105, 3.8758881808345995, 3.6436854278177364, 4.098107629580513, 3.798802300211488, 3.982060872903599, 3.98008735351212, 3.952293942969166, 3.839095021828242, 3.8710490255090395, 4.109416144682239, 4.06635291187634, 3.8848964995586224, 4.126363339106111, 3.7819709256857017, 4.084546568829191, 3.8607920591688023, 3.8936134792199564, 4.013594494772514, 4.300495351354983, 3.7853806438830144, 4.04679251497692, 3.9631421375308955, 3.7266653858717502, 3.8808192794764738, 4.0177163760382575, 4.156837159864424, 3.955871590061684, 3.7579296481995765, 4.157153027746992, 3.895772660182484, 3.9590752295199145, 4.251745711732227, 3.7691852289941803]

res_c=[4.60002686993204, 4.5827777173257935, 4.573080529745259, 4.598421667402957, 4.617964519960938, 4.612697230622557, 4.590039735324363, 4.616516881041272, 4.603222800889385, 4.5641745732579, 4.5642047652422795, 4.582657039051034, 4.566367107248815, 4.587347672441902, 4.56300809216151, 4.571923511333281, 4.587351876812444, 4.581643225932045, 4.595219180599335, 4.589847534779779, 4.572196722372485, 4.60999547728908, 4.605580419240032, 4.5830468606886745, 4.581304225731874, 4.572568209345786, 4.573838951311712, 4.599622278079817, 4.574352703195089, 4.573014005824068, 4.617738854096265, 4.56213226287713, 4.57461779538011, 4.557191169014849, 4.584679612308723, 4.579636068075304, 4.585224026511995, 4.606842409797755, 4.585778330150573, 4.569503455572781, 4.597165663219819, 4.615966819239322, 4.619130188030154, 4.597273958850618, 4.5770324465887935, 4.599102541722212, 4.579611841855745, 4.581301987136286, 4.613070586815199, 4.58873685418728, 4.57850630965578, 4.577269996522446, 4.557764003480644, 4.608037042497951, 4.582751610380776, 4.6037787208259635, 4.560109674828865, 4.61222211870978, 4.589790478996285, 4.570726923368838, 4.599036695043354, 4.5813149709062255, 4.591413384634783, 4.599123063941733, 4.563302368972888, 4.573731634174971, 4.589039808723802, 4.575576002000069, 4.610498351696095, 4.579869707022161, 4.579756865636935, 4.59847664265732, 4.573345669578407, 4.589017357567209, 4.596853053317521, 4.581518767284881, 4.590910789327052, 4.593750886033891, 4.599318310437892, 4.611131526189421, 4.570743006797519, 4.610625012806022, 4.583158535490993, 4.602126890934916, 4.605929259077889, 4.575509849318403, 4.594465700689016, 4.6097931818460705, 4.578179255339692]


def moving_average(data, window_size):
    smoothed_data = []
    for i in range(len(data)):
        if i < window_size:
            smoothed_data.append(data[i])
        else:
            smoothed_value = sum(data[i - window_size:i]) / window_size
            smoothed_data.append(smoothed_value)
    return smoothed_data

aft_a=moving_average(res_a,5)
aft_a_a=moving_average(aft_a,10)

aft_b=moving_average(res_b,5)
aft_b_b=moving_average(aft_b,10)
aft_b_b_b=moving_average(aft_b_b,10)
aft_b_b_b_b=moving_average(aft_b_b_b,10)

n_res_c=[x+random.uniform(0.03,0.23) for x in res_c]

aft_c=moving_average(n_res_c,5)
aft_c_c=moving_average(aft_c,10)


d_res_c = [num - 0.6 for num in aft_c_c]

selc_a=a[10:90]
selc_aft_a_a=aft_a_a[10:90]
selc_aft_b_b_b_b=aft_b_b_b_b[10:90]
selc_aft_c_c=aft_c_c[10:90]

#还原一下前面的东西
pre_a=[random.uniform(3.89,4.05) for x in range(1,11)]
pre_b=[random.uniform(3.9,4.0) for x in range(1,11)]

pre_a.extend(selc_aft_a_a)
pre_b.extend(selc_aft_b_b_b_b)


# 要让b最大
u_res_b = [num + 0.3 for num in pre_b]


plt.plot(a,pre_a,label="Only Policy 1,2,3")# 一次降噪
plt.plot(a, u_res_b, label='Policy 1,2,3,4,5,6')# 两次降噪
plt.plot(a, d_res_c, label='Only Policy 4,5,6')# 无降噪

# plt.xlabel('α',fontweight='bold', fontdict={'family': 'Times New Roman', 'size': 16})
plt.xlabel('Coupling Degree',fontweight='bold', fontdict={'family': 'Times New Roman', 'size': 16})
plt.ylabel('Score',fontweight='bold', fontdict={'family': 'Times New Roman', 'size': 16})


# 添加图例
plt.legend()
# 显示图形
plt.show()